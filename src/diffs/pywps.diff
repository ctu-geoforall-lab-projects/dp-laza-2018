diff --git a/.travis.yml b/.travis.yml
index 3c64f3c..114a073 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -27,11 +27,11 @@ git:
     submodules: false
 
 install:
-  - pip install pip --upgrade
-  - pip install .
-  - pip install -r requirements-gdal.txt
-  - pip install -r requirements-dev.txt
-  - pip install coveralls
+  - isolation install isolation --upgrade
+  - isolation install .
+  - isolation install -r requirements-gdal.txt
+  - isolation install -r requirements-dev.txt
+  - isolation install coveralls
 
 script:
   - python -m unittest tests
diff --git a/default-sample.cfg b/default-sample.cfg
index 4d96cc3..a19f8d3 100644
--- a/default-sample.cfg
+++ b/default-sample.cfg
@@ -33,7 +33,7 @@ maxprocesses=10
 parallelprocesses=2
 
 [processing]
-mode=default
+mode=docker
 
 [logging]
 level=INFO
diff --git a/docs/docker.rst b/docs/docker.rst
new file mode 100644
index 0000000..e004cc8
--- /dev/null
+++ b/docs/docker.rst
@@ -0,0 +1,61 @@
+.. _docker:
+
+Docker Container Extension
+==========================
+
+To isolate each process execution it is possible to enable docker extension.
+
+.. note:: The PyWPS process implementations are not changed by using the
+  scheduler extension.
+
+First of all install Docker from `website <https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/>`_.
+
+Clone ``pywps-demo``::
+
+  $ git clone https://github.com/lazaa32/pywps-flask.git
+
+Install demo requirements from ``requirement.txt``. It will download all required packages including
+``pywps`` core package::
+
+  $ cd pywps-flask
+  $ pip install -r requirements.txt
+
+``pywps`` package was downloaded to ``src`` directory. Let's set the ``PYTHONPATH`` so ``pywps-demo`` knows
+where to find::
+
+  $ EXPORT PYTHONPATH=$PYTHONPATH:$PWD/src/pywps-develop
+
+If everything went OK, it should be now possible to run::
+
+  $ python3 demo.py
+
+However the demo still runs without Docker extension. First of all it is necessary to build an image from Dockerfile.
+From the image all containers will be created::
+
+  $ cd docker/isolation
+  $ docker build -t container .
+
+.. note:: The **-t** flag sets a name and optionally a tag in the **name:tag** format. The name of the image
+   will be one of the parameter value in configuration file.
+.. warning:: The image build can take up to several tens of minutes since some manual installation run on the
+   background.
+
+You can check the image was built by::
+
+  $ docker images
+
+To activate this extension you need to edit the ``pywps.cfg`` configuration file and make the following changes::
+
+  [processing]
+  mode=docker
+  port_min=5050
+  port_max=5070
+  docker_img=container
+  dckr_inp_dir=/pywps-flask/data
+  dckr_out_dir=/pywps-flask/outputs
+
+``mode`` must be set to ``docker``. ``port_min`` and ``port_max`` define the range of ports which can be
+assigned to containers. ``docker_img`` must match to name of the image given by -t flag during the image build.
+
+The docker extension is now enabled and every asynchronous request will be executed separately in a Docker
+container.
\ No newline at end of file
diff --git a/docs/index.rst b/docs/index.rst
index 13549a5..7e15062 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -37,6 +37,7 @@ Contents:
    migration
    external-tools
    extensions
+   docker
    api
    development
    exceptions
diff --git a/pywps/app/Process.py b/pywps/app/Process.py
index 0592cc0..f597c5e 100644
--- a/pywps/app/Process.py
+++ b/pywps/app/Process.py
@@ -148,8 +148,7 @@ class Process(object):
         wps_response = self._execute_process(self.async, wps_request, wps_response)
 
         return wps_response
-    
-        
+
     def _set_uuid(self, uuid):
         """Set uuid and status location path and url
         """
diff --git a/pywps/exceptions.py b/pywps/exceptions.py
index 8483911..e0e1c57 100644
--- a/pywps/exceptions.py
+++ b/pywps/exceptions.py
@@ -150,3 +150,10 @@ class SchedulerNotAvailable(NoApplicableCode):
     """Job scheduler not available exception implementation
     """
     code = 400
+
+
+class NoAvailablePortException(NoApplicableCode):
+    """
+    No port available for new docker.
+    """
+    code = 400
diff --git a/pywps/processing/__init__.py b/pywps/processing/__init__.py
index 03bf0af..63816e1 100644
--- a/pywps/processing/__init__.py
+++ b/pywps/processing/__init__.py
@@ -7,6 +7,7 @@
 import pywps.configuration as config
 from pywps.processing.basic import MultiProcessing
 from pywps.processing.scheduler import Scheduler
+from pywps.processing.container import Container
 # api only
 from pywps.processing.basic import Processing  # noqa: F401
 from pywps.processing.job import Job  # noqa: F401
@@ -16,6 +17,7 @@ LOGGER = logging.getLogger("PYWPS")
 
 MULTIPROCESSING = 'multiprocessing'
 SCHEDULER = 'scheduler'
+DOCKER = 'docker'
 DEFAULT = MULTIPROCESSING
 
 
@@ -30,6 +32,8 @@ def Process(process, wps_request, wps_response):
     LOGGER.info("Processing mode: %s", mode)
     if mode == SCHEDULER:
         process = Scheduler(process, wps_request, wps_response)
+    elif mode == DOCKER:
+        process = Container(process, wps_request, wps_response)
     else:
         process = MultiProcessing(process, wps_request, wps_response)
     return process
diff --git a/pywps/processing/container.py b/pywps/processing/container.py
new file mode 100644
index 0000000..8f5151e
--- /dev/null
+++ b/pywps/processing/container.py
@@ -0,0 +1,155 @@
+##################################################################
+# Copyright 2016 OSGeo Foundation,                               #
+# represented by PyWPS Project Steering Committee,               #
+# licensed under MIT, Please consult LICENSE.txt for details     #
+##################################################################
+
+import os
+import shutil
+import pywps.configuration as config
+from pywps.processing.basic import Processing
+
+from owslib.wps import WebProcessingService as WPS
+from pywps.response.status import STATUS
+from pywps.exceptions import NoAvailablePortException
+import docker
+import socket
+import time
+
+from pywps.inout.basic import LiteralInput, ComplexInput, BBoxInput
+import owslib
+from pywps.dblog import update_response
+
+
+import logging
+LOGGER = logging.getLogger("PYWPS")
+
+
+class ClientError:
+    pass
+
+
+class Container(Processing):
+    def __init__(self, process, wps_request, wps_response):
+        super().__init__(process, wps_request, wps_response)
+        self.port = self._assign_port()
+        self.client = docker.from_env()
+        self.cntnr = self._create()
+
+    def _create(self):
+        cntnr_img = config.get_config_value("processing", "docker_img")
+        prcs_inp_dir = self.job.wps_response.process.workdir
+        prcs_out_dir = config.get_config_value("server", "outputpath")
+        dckr_inp_dir = config.get_config_value("processing", "dckr_inp_dir")
+        dckr_out_dir = config.get_config_value("processing", "dckr_out_dir")
+        container = self.client.containers.create(cntnr_img, ports={"5000/tcp": self.port}, detach=True,
+                                                  volumes={
+                                                  prcs_out_dir: {'bind': dckr_out_dir, 'mode': 'rw'},
+                                                  prcs_inp_dir: {'bind': dckr_inp_dir, 'mode': 'ro'}
+                                                  })
+        return container
+
+    def _assign_port(self):
+        port_min = int(config.get_config_value("processing", "port_min"))
+        port_max = int(config.get_config_value("processing", "port_max"))
+        for port in range(port_min, port_max):
+            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+            res = sock.connect_ex(('127.0.0.1', port))
+            # TODO find better solution for errno
+            if res != 0:
+                return port
+        raise NoAvailablePortException("No port from range {}-{} available.".format(port_min, port_max))
+
+    def start(self):
+        self.cntnr.start()
+        # TODO it takes some time to start the container
+        time.sleep(0.5)
+        self._execute()
+        self._parse_status()
+        self._dirty_clean()
+
+    def stop(self):
+        self.cntnr.stop()
+
+    def cancel(self):
+        self.cntnr.kill()
+
+    def pause(self):
+        self.cntnr.pause()
+
+    def unpause(self):
+        self.cntnr.unpause()
+
+    def _execute(self):
+        url_execute = "http://localhost:{}/wps".format(self.port)
+        inputs = get_inputs(self.job.wps_request.inputs)
+        output = get_output(self.job.wps_request.outputs)
+        wps = WPS(url=url_execute, skip_caps=True)
+        self.execution = wps.execute(self.job.wps_request.identifier, inputs=inputs, output=output)
+
+    # Obsolete function when docker was called in syncro mode
+    def _parse_outputs(self):
+        for output in self.execution.processOutputs:
+            # TODO what if len(data) > 1 ??
+            if output.data:
+                self.job.wps_response.outputs[output.identifier].data = output.data[0]
+            if output.reference:
+                rp = output.reference[output.reference.index('outputs/'):]
+                self.job.wps_response.outputs[output.identifier].file = rp
+
+        self.job.wps_response.update_status('PyWPS process {} finished'.format(self.job.process.identifier),
+                                            status_percentage=100, status=STATUS.DONE_STATUS)
+
+    def _parse_status(self):
+        self.job.process.status_url = self.execution.statusLocation
+        self.job.wps_response.update_status(message=self.execution.statusMessage)
+
+    def _dirty_clean(self):
+        # TODO wait then stop&remove container
+        time.sleep(1)
+        self.cntnr.stop()
+        self.cntnr.remove()
+        self.job.process.clean()
+        os.remove(self.job.process.status_location)
+        # update_response(self.job.wps_response.uuid, self.job.wps_response)
+        # self.job.wps_response.update_status('PyWPS Process {} finished'.format(self.job.process.title), 100,
+        #                                     STATUS.DONE_STATUS, clean=self.job.process.async)
+
+
+def get_inputs(job_inputs):
+    """
+    Return all inputs in [(input_name1, input_value1), (input_name2, input_value2)]
+    Return value can be used for WPS.execute method.
+    :return: input values
+    :rtype:list of tuples
+    """
+    the_inputs = []
+    for key in job_inputs.keys():
+        inp = job_inputs[key][0]
+        if isinstance(inp, LiteralInput):
+            # TODO use inp.source or inp.data?
+            ows_inp = str(job_inputs[key][0].source)
+        elif isinstance(inp, ComplexInput):
+            fp = os.path.basename(job_inputs[key][0].file)
+            dckr_inp_dir = config.get_config_value('processing', 'dckr_inp_dir')
+            ows_inp = owslib.wps.ComplexDataInput("file://" + os.path.join(dckr_inp_dir, fp))
+        elif isinstance(inp, BBoxInput):
+            ows_inp = owslib.wps.BoundingBoxDataInput(job_inputs[key][0].source)
+        else:
+            raise Exception
+        the_inputs.append((key, ows_inp))
+
+    return the_inputs
+
+
+def get_output(job_output):
+    """
+    Return all outputs name
+    Return value can be used for WPS.execute method.
+    :return: output names
+    :rtype:list
+    """
+    the_output = []
+    for key in job_output.keys():
+        the_output.append((key, job_output[key]['asReference']))
+    return the_output
diff --git a/pywps/processing/job.py b/pywps/processing/job.py
index b855599..f7fe2bc 100644
--- a/pywps/processing/job.py
+++ b/pywps/processing/job.py
@@ -38,7 +38,7 @@ class Job(object):
         LOGGER.debug('dump job ...')
         import dill
         filename = tempfile.mkstemp(prefix='job_', suffix='.dump', dir=self.workdir)[1]
-        with open(filename, 'w') as fp:
+        with open(filename, 'wb') as fp:
             dill.dump(self, fp)
             LOGGER.debug("dumped job status to %s", filename)
             return filename
diff --git a/pywps/response/execute.py b/pywps/response/execute.py
index f78cfb0..e994de3 100644
--- a/pywps/response/execute.py
+++ b/pywps/response/execute.py
@@ -15,7 +15,7 @@ from pywps import WPS, OWS
 from pywps.app.basic import xml_response
 from pywps.exceptions import NoApplicableCode
 import pywps.configuration as config
-import pywps.dblog
+from pywps.dblog import update_response
 
 from pywps.response.status import STATUS
 from pywps.response import WPSResponse
@@ -38,6 +38,33 @@ class ExecuteResponse(WPSResponse):
         self.process = kwargs["process"]
         self.outputs = {o.identifier: o for o in self.process.outputs}
 
+    def update_status(self, message=None, status_percentage=None, status=None,
+                      clean=True):
+        """
+        Update status report of currently running process instance
+
+        :param str message: Message you need to share with the client
+        :param int status_percentage: Percent done (number betwen <0-100>)
+        :param pywps.app.WPSResponse.STATUS status: process status - user should usually
+            ommit this parameter
+        """
+
+        if message:
+            self.message = message
+
+        if status:
+            self.status = status
+
+        if status_percentage:
+            self.status_percentage = status_percentage
+
+        # check if storing of the status is requested
+        if self.status >= STATUS.STORE_AND_UPDATE_STATUS:
+            # rebuild the doc and update the status xml file
+            self.doc = self._construct_doc()
+            self.write_response_doc(clean)
+
+        update_response(self.uuid, self)
 
     def write_response_doc(self, clean=True):
         # TODO: check if file/directory is still present, maybe deleted in mean time
